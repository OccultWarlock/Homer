{"remainingRequest":"/home/pi/homer/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pi/homer/src/components/services/OpenWeather.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/pi/homer/src/components/services/OpenWeather.vue","mtime":1654015932568},{"path":"/home/pi/homer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/homer/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/homer/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/pi/homer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/homer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiT3BlbldlYXRoZXIiLAogIHByb3BzOiB7CiAgICBpdGVtOiBPYmplY3QsCiAgfSwKICBkYXRhOiAoKSA9PiAoewogICAgaWQ6IG51bGwsCiAgICBpY29uOiBudWxsLAogICAgbmFtZTogbnVsbCwKICAgIHRlbXA6IG51bGwsCiAgICBjb25kaXRpb25zOiBudWxsLAogICAgZXJyb3I6IGZhbHNlLAogIH0pLAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmZldGNoV2VhdGhlcigpOwogIH0sCiAgbWV0aG9kczogewogICAgZmV0Y2hXZWF0aGVyOiBhc3luYyBmdW5jdGlvbiAoKSB7CiAgICAgIGxldCBsb2NhdGlvblF1ZXJ5OwoKICAgICAgLy8gVXNlIGxvY2F0aW9uIElEIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHJldHJpZXZlIHZhbHVlIGZyb20gbG9jYXRpb24gKG5hbWUpLgogICAgICBpZiAodGhpcy5pdGVtLmxvY2F0aW9uSWQpIHsKICAgICAgICBsb2NhdGlvblF1ZXJ5ID0gYGlkPSR7dGhpcy5pdGVtLmxvY2F0aW9uSWR9YDsKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2NhdGlvblF1ZXJ5ID0gYHE9JHt0aGlzLml0ZW0ubG9jYXRpb259YDsKICAgICAgfQoKICAgICAgY29uc3QgYXBpS2V5ID0gdGhpcy5pdGVtLmFwaWtleSB8fCB0aGlzLml0ZW0uYXBpS2V5OwogICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/JHtsb2NhdGlvblF1ZXJ5fSZhcHBpZD0ke2FwaUtleX0mdW5pdHM9JHt0aGlzLml0ZW0udW5pdHN9YDsKICAgICAgZmV0Y2godXJsKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgICAgfSkKICAgICAgICAudGhlbigod2VhdGhlcikgPT4gewogICAgICAgICAgdGhpcy5pZCA9IHdlYXRoZXIuaWQ7CiAgICAgICAgICB0aGlzLm5hbWUgPSB3ZWF0aGVyLm5hbWU7CiAgICAgICAgICB0aGlzLnRlbXAgPSBwYXJzZUludCh3ZWF0aGVyLm1haW4udGVtcCkudG9GaXhlZCgxKTsKICAgICAgICAgIHRoaXMuaWNvbiA9IHdlYXRoZXIud2VhdGhlclswXS5pY29uOwogICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gd2VhdGhlci53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgIHRoaXMuZXJyb3IgPSB0cnVlOwogICAgICAgIH0pOwogICAgfSwKICB9LAogIGZpbHRlcnM6IHsKICAgIHRlbXBTdWZmaXg6IGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkgewogICAgICBpZiAoIXZhbHVlKSByZXR1cm4gIiI7CgogICAgICBsZXQgdW5pdCA9ICJLIjsKICAgICAgaWYgKHR5cGUgPT09ICJtZXRyaWMiKSB7CiAgICAgICAgdW5pdCA9ICLCsEMiOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICJpbXBlcmlhbCIpIHsKICAgICAgICB1bml0ID0gIsKwRiI7CiAgICAgIH0KICAgICAgcmV0dXJuIGAke3ZhbHVlfSAke3VuaXR9YDsKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["OpenWeather.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OpenWeather.vue","sourceRoot":"src/components/services","sourcesContent":["<template>\n  <div>\n    <div class=\"card\" :class=\"item.class\">\n      <a\n        :href=\"`https://openweathermap.org/city/${id}`\"\n        :target=\"item.target\"\n        rel=\"noreferrer\"\n      >\n        <div class=\"card-content\">\n          <div class=\"media\">\n            <div v-if=\"icon\" class=\"media-left\" :class=\"item.background\">\n              <figure class=\"image is-48x48\">\n                <img\n                  :src=\"`https://openweathermap.org/img/wn/${icon}@2x.png`\"\n                  :alt=\"conditions\"\n                  :title=\"conditions\"\n                />\n              </figure>\n            </div>\n            <div class=\"media-content\">\n              <p v-if=\"error\" class=\"error\">Data could not be retrieved</p>\n              <div v-else>\n                <p class=\"title is-4\">{{ name }}</p>\n                <p class=\"subtitle is-6\">\n                  {{ temp | tempSuffix(this.item.units) }}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"tag\" :class=\"item.tagstyle\" v-if=\"item.tag\">\n            <strong class=\"tag-text\">#{{ item.tag }}</strong>\n          </div>\n        </div>\n      </a>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"OpenWeather\",\n  props: {\n    item: Object,\n  },\n  data: () => ({\n    id: null,\n    icon: null,\n    name: null,\n    temp: null,\n    conditions: null,\n    error: false,\n  }),\n  created() {\n    this.fetchWeather();\n  },\n  methods: {\n    fetchWeather: async function () {\n      let locationQuery;\n\n      // Use location ID if specified, otherwise retrieve value from location (name).\n      if (this.item.locationId) {\n        locationQuery = `id=${this.item.locationId}`;\n      } else {\n        locationQuery = `q=${this.item.location}`;\n      }\n\n      const apiKey = this.item.apikey || this.item.apiKey;\n      const url = `https://api.openweathermap.org/data/2.5/weather?${locationQuery}&appid=${apiKey}&units=${this.item.units}`;\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n          return response.json();\n        })\n        .then((weather) => {\n          this.id = weather.id;\n          this.name = weather.name;\n          this.temp = parseInt(weather.main.temp).toFixed(1);\n          this.icon = weather.weather[0].icon;\n          this.conditions = weather.weather[0].description;\n        })\n        .catch((e) => {\n          console.log(e);\n          this.error = true;\n        });\n    },\n  },\n  filters: {\n    tempSuffix: function (value, type) {\n      if (!value) return \"\";\n\n      let unit = \"K\";\n      if (type === \"metric\") {\n        unit = \"°C\";\n      } else if (type === \"imperial\") {\n        unit = \"°F\";\n      }\n      return `${value} ${unit}`;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n// Add a border around the weather image.\n// Otherwise the image is not always distinguishable.\n.media-left {\n  &.circle,\n  &.square {\n    background-color: #e4e4e4;\n  }\n\n  &.circle {\n    border-radius: 90%;\n  }\n\n  img {\n    max-height: 100%;\n  }\n}\n\n.error {\n  color: #de0000;\n}\n\n// Change background color in dark mode.\n.is-dark {\n  .media-left {\n    &.circle,\n    &.square {\n      background-color: #909090;\n    }\n  }\n}\n</style>\n"]}]}